namespace ltr {
namespace cv {
/** \page HowToUseCrossvalidation Tutorial page 2 - Crossvalidation
    \ingroup Tutorial

\tableofcontents

\section CrossvalidationDataTest Testing

http://en.wikipedia.org/wiki/Cross-validation_(statistics)

Cross-validation is a technique for assessing how the results of a statistical analysis will generalize to an independent data set.


\section CrossvalidationDataTestCrossvalidation Cross-validation
LTR library supports cross-validaion technique that was described in the beginning of this page.

CrossValidator is the class that performs crossvalidation over the selected data sets, learners, measures and splitters. It contains data:

 - data_sets - data sets to run crossvalidation on
 - measures - measures, wich values will be calculated for every split
 - learners - learners used to produce scorers on train data
 - splitters - splitters used to split dataset into train + test sets

CrossValidator contains following methods:

 - CrossValidator::addDataSet(const DataSet<ObjectType>& data_set) - adds data_set to the crossvalidator
 - CrossValidator::addLearner(const typename Learner<ObjectType>::Ptr& learner) - adds learner_ptr <b>shared pointer (!!)</b> to the crossvalidator
 - CrossValidator::addSplitter(const typename Splitter<ObjectType>::Ptr& splitter) - adds splitter_ptr <b>shared pointer (!!)</b> to the crossvalidator
 - CrossValidator::addMeasure(const typename Measure<ObjectType>::Ptr& measure) - adds measure_ptr <b>shared pointer (!!)</b> to the crossvalidator
 - CrossValidator::launch() - launches crossvalidation process
 - CrossValidator::toString() - converts crossvalidator to the printable string and forms set of tables
 - CrossValidator::reset() - resets all the information in CrossVlidator

<b>!! - please use here only shared pointer! Usage of any other pointers can lead to errors and indeterminate behavior!</b>

Splitter specifies the strategy of crossvalidation, namely, how to split input datasets into train and test sets.

\n There are 3 different splitters implemented in LTR:

Splitters:
\n 
Splitter:                     |Description:
------------------------------|-----------------------------------
KFoldSimpleSplitter       |Splits dataset into K nearly equal sets. (see wikipedia page)
TKFoldSimpleSplitter     |As a KFoldSimpleSplitter, but runs T times producing different subsets
LeaveOneOutSplitter |Test subset contains only one object (see wikipedia page)


Here is an example how to use CrossValidator:
Code:                               |Output:
------------------------------------|-------------------------------------
\include tutorial_crossvalidation_example1.cpp|\include tutorial_crossvalidation_example1.out


*/



}
}