namespace ltr {

/** \mainpage Main page
\section LTR About LTR

<a href="https://github.com/yaschool/ltr/">Learning to Rank (LTR)</a> is an open-source C++ library of algorithms for machine learning problems. Basically LTR can be used for <a href=http://en.wikipedia.org/wiki/Learning_to_rank>ranking problem</a> but one can use it also for classification and regression problems. To best of our knowledge there is no analogous open-source C++ library for learning to rank.\n
\n

\tableofcontents

\section PHILOSOPHY Philosophy of LTR
From theoretical point of view every algorithms of machine learning can be decomposed to a few simple ideas.\n
Many of these ideas are similar of even coincident for ranking, classification, regression.\n
Some examples of decomposition:
\li TreeNet(link) = Gradient Descent + Boosting + Desicion Tree learning
\li SoftRank(link) = Gradient Descent + Neural Net learning + Smoothing Nondifferentiability
\li RankPG(link) = Genetic Programming + Listwise ranking measure optimizing
\li AdaBoost(link) = Boosting + Exponential loss function approximation + Pointwise measure optimizing
\li AdaRank(link) = Boosting + Exponential loss function approximation + Listwise measure optimizing\n


%The main ideas of LTR are easy extensibility and generalizability of source code. This is achieved by wide using of C++ templates and polymorphism.\n
One can easily add any heuristic to a standard learning algorithm because all of heuristics are functors in LTR. So user can easily change any step of algorithm just defining new heuristic object and insert them into the code of origin algorithm.

User can write code performing learning and testing by himself or can use console application with human-readable configuration file.\n
\n
Each trained ranker/classifier/regressor can be serialized in C++ code so it can be used in other projects with no dependecies on the LTR library.

\section CONTENT What can you find in LTR?

List of algorithms implemented in the current version of LTR:


Classification       | Regression          | Ranking      | Ensembles    |
---------------------|---------------------|--------------|--------------|  
kNN                  | LSM                 |RankGP        |Boosting      |
Naive Bayes          |                     |Linear ranker |Bagging       |
QDA                  |                     |              |RSM           |
Fisher LDA           |                     |              |              |

LTR is an actively growing project so this list will be expanded significantly.

Quality on some public datasets is presented \ref QualityTable "here".

\section DOCUMENTATION Documentation

  - \b Tutorials
    - \ref HowToInstall
    - \ref TutorialData
    - \ref CrossvalidationData 
    - \ref TutorialDataPreprocessors
    - \ref TutorialFeatureConverters
    - \ref TutorialMeasureLearnerScorer
    - \ref TutorialComposition

  - \b Advanced \b topics
    - \ref HowToCreateNewLearnerAndScorer
    - \ref HowToWriteUnittests
    - \ref HowToCheckSerialization
    
  - \b Other \b information
    - \ref QualityTable

\section REQUIREMENTS Requirements
\li Boost\n
LTR assumes that you already have <a href=http://www.boost.org>Boost</a> sources and some static libraries in your system.
The detailed inatallation manual is \ref HowToInstall "here". 
\li CMake\n
LTR uses the <a href=http://www.cmake.org>CMake</a> build system so you should install it. 

\section COMPILER Compiler support
LTR is standard C++98 and should be compatible with any common C++ compiler.
LTR is being successfully built with the following compilers:
\li MSVS (Visual Studio) 2008 and newer\n
\li GCC 4.1 and newer\n

\section LICENSE License
Haven't decide yet

\section CONTRIBUTORS Contributors
You can see the full list of project participants \ref Contributors "here".

\section SUPPORT Get support
If you want get help using LTR or send a bug report, please, write to address ltr.yaschool@yandex.ru
  
   

**/

}
