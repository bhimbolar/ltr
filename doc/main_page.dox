namespace ltr {

/** \mainpage Main page

\tableofcontents

\section LTR About LTR
<a href="https://github.com/yaschool/ltr/">Learning to Rank (LTR)</a> is an open-source C++ library of algorithms for machine learning problems. Basically LTR can be used for <a href=http://en.wikipedia.org/wiki/Learning_to_rank>ranking problem</a> but one can use it also for classification and regression problems. To best of our knowledge there is no analogous open-source C++ library for learning to rank.\n
\n 
User can write code performing learning and testing by himself \ref HowToCreateNewLearnerAndScorer "here" or can use console application with human-readable configuration file.\n
\n
Each trained ranker/classifier/regressor can be serialized in C++ code so it can be used in other projects with no dependecies on the LTR library.

\section PHILOSOPHY Philosophy of LTR
From theoretical point of view every algorithms of machine learning can be decomposed to a few simple ideas.\n
Many of these ideas are similar of even coincident for ranking, classification, regression.\n
Some examples of decomposition:
\li <a href=http://www.salford-systems.com/en/products/treenet>TreeNet</a> = Gradient Descent + Boosting + Desicion Tree learning
\li <a href=http://research.microsoft.com/pubs/63585/softrankwsdm08submitted.pdf>SoftRank</a> = Gradient Descent + Neural Net learning + Smoothing Nondifferentiability
\li <a href=http://front.cc.nctu.edu.tw/Richfiles/18182-jyyeh-LR4IR07.pdf>RankPG</a> = Genetic Programming + Listwise ranking measure optimizing
\li <a href=http://www.robots.ox.ac.uk/~az/lectures/cv/adaboost_matas.pdf>AdaBoost</a> = Boosting + Exponential loss function approximation + Pointwise measure optimizing
\li <a href=http://research.microsoft.com/en-us/people/hangli/xu-sigir07.pdf>AdaRank</a> = Boosting + Exponential loss function approximation + Listwise measure optimizing\n


%The main ideas of LTR are easy extensibility and generalizability of source code. This is achieved by wide using of C++ templates and polymorphism.\n
One can easily add any heuristic to a standard learning algorithm because all of heuristics are functors in LTR. So user can easily change any step of algorithm just defining new heuristic object and insert them into the code of origin algorithm.

User can write code performing learning and testing by himself or can use console application with human-readable configuration file.\n
\n
Each trained ranker/classifier/regressor can be serialized in C++ code so it can be used in other projects with no dependecies on the LTR library.

\section CONTENT What can you find in LTR?

List of algorithms implemented in the current version of LTR:


Classification       | Regression          | Ranking      | Ensembles    |
---------------------|---------------------|--------------|--------------|  
kNN                  | LSM                 |RankGP        |Boosting      |
Naive Bayes          |                     |Linear ranker |Bagging       |
QDA                  |                     |              |RSM           |
Fisher LDA           |                     |              |              |

LTR is an actively growing project so this list will be expanded significantly.

Quality on some public datasets is presented \ref QualityTable "here".

\section DOCUMENTATION Documentation

  - \b Tutorials
    - \ref HowToInstall
    - \ref TutorialData
    - \ref TutorialMeasureLearnerScorer
    - \ref HowToUseCrossvalidation
    - \ref TutorialFeatureConverters
    - \ref TutorialDataPreprocessors
    - \ref TutorialComposition
    - \ref TutorialDecisionTree
    - \ref TutorialBayesianClassification

  - \b Advanced \b topics
    - \ref HowToCreateNewLearnerAndScorer
    - \ref HowToWriteUnittests
    - \ref HowToCheckSerialization
    - \ref TutorialLTRClientForDeveloper
    
  - \b Other \b information
    - \ref QualityTable

\section REQUIREMENTS Requirements
\li Boost\n
LTR assumes that you already have <a href=http://www.boost.org>Boost</a> sources and some static libraries in your system.
%The detailed inatallation manual is \ref HowToInstall "here". 
\li CMake\n
LTR uses the <a href=http://www.cmake.org>CMake</a> build system so you should install it. 

\section COMPILER Compiler support
LTR is standard C++98 and should be compatible with any common C++ compiler.
LTR is being successfully built with the following compilers:
\li MSVS (Visual Studio) 2008 and newer\n
\li GCC 4.1 and newer\n

\section LICENSE License
LTR IS LICENSED UNDER THE BSD LICENSE. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

\section CONTRIBUTORS Contributors
You can see the full list of project participants \ref Contributors "here".

\section SUPPORT Get support
If you want get help using LTR or send a bug report, please, write to address ltr.yaschool@yandex.ru
  
   

**/

}
