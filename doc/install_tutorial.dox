namespace ltr {
/** \page HowToInstall How To Install
	\ingroup Tutorial

\tableofcontents
	
\section InstallingLTR Installing LTR

Assuming you already have downloaded LTR to you computer, LTR's root directory is supposed to contain CMakeLists.txt
file and the following folders: cmake, contrib, data, doc, ltr and ltr_client.

\subsection InstallingBoost Installing Boost

%The simplest way to install boost under Windows is to use an installer from
<a href=http://www.boostpro.com/download>http://www.boostpro.com/download</a>.
Unix users can read %the official tutorial from
<a href=http://www.boost.org/doc/libs/1_51_0/more/getting_started/unix-variants.html>http://www.boost.org/doc/libs/1_51_0/more/getting_started/unix-variants.html</a>.

Now LTR uses only <i>multithreaded</i> and <i>multithreaded debug</i> versions of boost, but it is recommended to install DLL variants too.

\subsection InstallingCMake Installing CMake

Install CMake from <a href=www.cmake.org/cmake/resources/software.html>www.cmake.org/cmake/resources/software.html</a>
and add CMake to the system PATH.

\subsection ConfiguringLTR Configuring LTR

Create a directory for building, the default name of which is <LTR_root>/build. Further shell commands will be written as if you've chosen
the default <LTR_root>/build directory for building. From the chosen directory run the following shell command:

\code
cmake ../
\endcode

Here ../ is a relative path to <LTR_root>. This command will configure LTR and generate makefiles or project files, depending on
your system and IDE installed. You can specify what to generate manually, as here:

\code
cmake ../ -G "Visual Studio 9 2008"
\endcode

For the list of all supported generators, simply write

\code
cmake
\endcode

If you are an LTR's developer, it might be useful to have a shell-script file like the following (example for windows):
\include make_project.bat

\subsection BuildingLTR Building LTR

As you already have created your favorite IDE's project, compiling will now be simple.
(For example, in Visual Studio one just has to build an ALL_BUILD project.)

After building you can run unittests from <LTR_root>/build. In Visual Studio it can be done, by setting ltr_test as a
startup project and pressing Ctrl+F5.

It is important that after successful build you should build an INSTALL project, or (depending on your system and IDE) run

\code
make install
\endcode

This will create an <LTR_root>/lib directory with 3 static libraries in there: ltr, logog and puppy (with "_d" suffix if the debug build has been used). If you want to
use LTR in your project, you have to link to these libraries.

\section LinkingtoLTR Linking to LTR

Lets start from a rather simple test project, that uses LTR. Here is an example of the test project's CMakeLists.txt:

\includelineno CMakeLists.txt

Here the Test_Source_Path variable is the path to the sources of the test project. Usually it equals to the
CMAKE_CURRENT_SOURCE_DIR variable, i.e., the path to the current CMakeLists.txt file.

Then the LTR_Source_Path is specified as a relative path from the Test_Source_Path. Absolute path can also be used:

\code
SET(LTR_Source_Path "C:/Data/Ltr1")
\endcode

Strings no. 7-8 include a cmake file, which specifies a SetUpLTR macro and run it with LTR_Source_Path parameter.
This will set all the necessary variables for using LTR (and also Boost).

Strings no. 10-12 specify a directory for header files of the test project and list test's source files.

Finally, the ADD_EXECUTABLE command creates an executable project called test_executable from sources listed in the
Test_SOURCES variable. Then, the TARGET_LINK_LIBRARIES command makes test_executable project use LTR by invoking
LTR_libs variable, defined in SetUpLTR macro call.


**/
}