namespace ltr {
/** \page HowToInstall How To Install
	\ingroup Tutorial

\tableofcontents
	
\section InstallingLTR Installing LTR

Assuming you already have downloaded LTR to you computer, LTR's root directory is supposed to contain CMakeLists.txt
file and the following folders: cmake, contrib, data, doc, ltr and ltr_client.

\section WindowsInstall Installation on Windows

\subsection WInstallingCMake Installing CMake

Install CMake from <a href=www.cmake.org/cmake/resources/software.html>www.cmake.org/cmake/resources/software.html</a>
and add CMake to the system PATH.

\subsection WConfiguringLTR Configuring LTR

Create a directory for building, the recommended name of which is \<LTR_root>/build. Further shell commands will be written as if you've chosen
the \<LTR_root>/build directory for building. From the \<LTR_root>/build directory run the following shell command:

\code
cmake ../
\endcode

Here ../ is a relative path to \<LTR_root>. This command will configure LTR and generate makefiles or project files, depending on
IDE installed. You can specify what to generate manually, as here:

\code
cmake ../ -G "Visual Studio 9 2008"
\endcode

For the list of all supported generators, simply write

\code
cmake
\endcode

If you are an LTR's developer, it might be useful to have a shell-script file like the following:
\include make_project.bat

\subsection WBuildingLTR Building LTR

As you already have created your favorite IDE's project, compiling will now be simple.
(For example, in Visual Studio one just has to build an ALL_BUILD project.)

After building you can run unittests from \<LTR_root>/build. In Visual Studio it can be done, by setting ltr_test as a
startup project and pressing Ctrl+F5.

It is important that after successful build you should set an INSTALL project as startup and build.

This will create an \<LTR_root>/lib directory with 3 static libraries in there: ltr, rgog and puppy (with "_d" suffix if the debug build has been used). If you want to
use LTR in your project, you have to link to these libraries.

\section LinuxInstall Installation on Linux

\subsection LConfiguringLTR Configuring LTR

Create a directory for building, the recommended name of which is \<LTR_root>/build. Further shell commands will be written as if you've chosen
the \<LTR_root>/build directory for building. From the chosen directory run the following shell command:

\code
cmake ../
\endcode

Here ../ is a relative path to \<LTR_root>. This command will configure LTR and generate makefiles or project files, depending on
IDE installed. You can specify what to generate manually, as here:

\code
cmake ../ -G "Eclipse CDT4 - Unix Makefiles"
\endcode

For the list of all supported generators, simply write

\code
cmake
\endcode

If you are an LTR's developer, it might be useful to have a shell-script file like the following:
\include make_project.sh

\subsection LBuildingLTR Building LTR

As you already have created your favorite IDE's project, compiling will now be simple.
After building you can run unittests from \<LTR_root>/build.

It is important that after successful build you should build an INSTALL project, or (depending on your IDE) run

\code
make install
\endcode

This will create an \<LTR_root>/lib directory with 3 static libraries in there: ltr, logog and puppy (with "_d" suffix if the debug build has been used). If you want to
use LTR in your project, you have to link to these libraries.

\section LinkingtoLTR Linking to LTR

Now you can create test project. Create a directory for your project, for example \<LTR_root>/test. Put here your source code (main.cpp) and CMakeLists.txt, 
which should contains:

\verbatim
PROJECT(LTRTestProject CXX C)
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

IF(NOT CMAKE_BUILD_TYPE)
    MESSAGE(STATUS "No build type selected, default is Debug")
    SET(CMAKE_BUILD_TYPE "Debug")
ENDIF()

# Test_Source_Path variable - the path to the sources of the test project. Usually it equals to the
# CMAKE_CURRENT_SOURCE_DIR variable, i.e., the path to the current CMakeLists.txt file.
SET(Test_Source_Path "<LTR_root>/test")
# LTR_Source_Path - path to the LTR
SET(LTR_Source_Path "<LTR_root>")

INCLUDE(${LTR_Source_Path}/cmake/setup_ltr.cmake)
# This macro sets up all the necessary variables for using LTR (and also Boost)
SetUpLTR(${LTR_Source_Path})

# The directory for header files of the test project
INCLUDE_DIRECTORIES(${Test_Source_Path})
# Test_SOURCES variable - a list of test sources
SET(Test_SOURCES ${Test_Source_Path}/main.cpp
	   ${Test_Source_Path}/another_source.cpp) ---- if there is another source file
# Creates an executable project called test_executable from Test_SOURCES files
ADD_EXECUTABLE(test_executable ${Test_SOURCES})
# Makes test_executable project use LTR by invoking LTR_libs variable, defined in SetUpLTR macro call
TARGET_LINK_LIBRARIES(test_executable ${LTR_libs})
\endverbatim

Create directory \<LTR_root>/test/build, for building your project and run the following shell command from this directory:

\code
cmake ../test
\endcode

Now your project are in \<LTR_root>/test/build.


**/
}
