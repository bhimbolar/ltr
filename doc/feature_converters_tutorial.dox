namespace ltr {
/** \page TutorialFeatureConverters Tutorial page 4 - Feature converters
    \ingroup Tutorial

\tableofcontents

\section TutorialFeatureConverter FeatureConverter

This is a base class for all possible kinds of features preprocessing (normalization, PCA, missing values handling, etc.).
Converter applies object-wisely, it gets original object and produces converted object.

\dot
digraph {
rankdir=LR
margin=0.2
a [ shape="oval" label="Object" URL="\ref ltr::Object"];
b [ shape="box"  label="FeatureConverter" URL="\ref ltr::FeatureConverter"];
c [ shape="oval" label="ConvertedObject" URL="\ref ltr::Object"];
a -> b [label="apply()"];
b -> c;
}
\enddot

In general, algorithm of features preprocessing should learn on train data, so every FeatureConverter has its own FeatureConverterLearner.
In most cases you don't need to create FeatureConverter directly, it is just the result of FeatureConverterLearner work.

\dot
digraph {
rankdir=LR
margin=0.2
a [ shape="note" label="DataSet" URL="\ref ltr::DataSet"];
b [ shape="box"  label="Learner" URL="\ref ltr::FeatureConverterLearner"];
c [ shape="box"  label="FeatureConverter" URL="\ref ltr::FeatureConverter"];
a -> b [label="learn()"];
b -> c [label="make()"];
}
\enddot

One can use FeatureConverters via \link FeatureConverter::apply() apply() \endlink method:

\li \link FeatureConverter::apply() apply(const Object &input, Object *output) \endlink - convert one object
\li \link FeatureConverter::apply() apply(const DataSet<TElement> &input, DataSet<TElement> *output) \endlink - convert whole dataset

If you want to add a kind of features preprocessing in training of your Scorer you should add corresponding FeatureConverterLearner via
via \link Learner::addFeatureConverterLearner() addFeatureConverterLearner() \endlink method of Learner.

\section FeatureConverterList List of all FeatureConverters

%FeatureConverter         | Description                                                
--------------------------|------------------------------------------------------------
FakeFeatureConverter      | Does nothing with input object  
FeatureSampler            | Samples features with specified indices
PerFeatureLinearConverter | Performs linear transformation of each feature
NanToZeroConverter        | Converts NaN features to zero values
NanToAverageConverter     |  Converts NaN features to average values of all non NaN features from other Objects
NominalToBoolConverter    |   Converts nominal features to boolean, and move they to the end of features list
RemoveNominalConverter    | Removes all nominal features


<table class="example">
<tr><td>Example: learn converter and convert features.</td></tr>
<tr><td>
\include tutorial_feature_converter_example2.cpp
</td></tr>
<tr><td>Output:</td></tr>
<tr><td>
\include tutorial_feature_converter_example2.out
</td></tr>
</table>

\subsection TutorialFeatureSamplerLearner FeatureSamplerLearner

Produces FeatureSampler with specified indices.

<table class="example">
<tr><td>Example: learn converter and convert features.</td></tr>
<tr><td>
\include tutorial_feature_converter_example1.cpp
</td></tr>
<tr><td>Output:</td></tr>
<tr><td>
\include tutorial_feature_converter_example1.out
</td></tr>
</table>

**/
}
