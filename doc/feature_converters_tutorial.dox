namespace ltr {
/** \page TutorialFeatureConverters Tutorial page 4 - Feature converters
    \ingroup Tutorial

\tableofcontents

\section TutorialFeatureConverter FeatureConverter

A base class for feature converters.

Preprocesses Object, e.g. sample or linear transform features.
Can be applied to each Object in DataSet.
But before doing this FeatureConverter should be trained by some FeatureConverterLearner.
This can be usefull for better training of Scorer.

Feature converters which were used during training of Scorer
will be added in the result Scorer and consequently must be Serializable.

\note In most cases you don't need to create FeatureConverter directly,
normally it is the result of some FeatureConverterLearner work.

You can convert your data features in this way:

\li FeatureConverter::apply(const Object& input, Object* output)
\param input Object to be converted
\param output converted Object

\li FeatureConverter::apply(const DataSet<TElement>& input, DataSet<TElement>* output)
\param input DataSet to be converted
\param output converted DataSet

\subsection TutorialFakeFeatureConverter FakeFeatureConverter

Does nothing with input object

\subsection TutorialFeatureSampler FeatureSampler

Samples features with specified indices.

\subsection TutorialPerFeatureLinearConverter PerFeatureLinearConverter

Perform linear transformation of each feature.
\code
features[i] -> factors[i] * features[i] + shifts[i]
\endcode

\subsection TutorialNanToZeroConverter NanToZeroConverter

Converts NaN features to zero values.

\subsection TutorialNominalToBoolConverter NominalToBoolConverter

Converts nominal features to boolean, and move they to the end of features list.

Nominal feature with k values will be converted to k boolean features.

\subsection TutorialRemoveNominalConverter RemoveNominalConverter

Remove all nominal features.

\section TutorialFeatureConverterLearner FeatureConverterLearner

A base class for feature converter learners.

Learns input dataset and produces a FeatureConverter.
Sometimes before training a Scorer it's usefull to make some preprocessing
of object features, e.g. normalize, filter out non significant features, etc.
In order to do this one need to add FeatureConverterLearner into the BaseLearner.

If you want to make your own FeatureConverterLearner it's more convinient
to inherit from BaseFeatureConverterLearner.

You can get your FeatureConverter in this way:

\li FeatureConverterLearner::learn(const DataSet<TElement>& data_set, bool check_parameters = true)
\param data_set dataset to study
\param check_parameters whether perform Parameterized::checkParameters() before launch

\li FeatureConverterLearner::make()

\subsection TutorialFakeFeatureConverterLearner FakeFeatureConverterLearner

Produces FakeFeatureConverter.

\subsection TutorialFeatureNormalizerLearner FeatureNormalizerLearner

Independently normalize each feature component to the specified range.

<table class="example">
<tr><td>Example: learn converter and convert features.</td></tr>
<tr><td>
\include tutorial_feature_converter_example2.cpp
</td></tr>
<tr><td>Output:</td></tr>
<tr><td>
\include tutorial_feature_converter_example2.out
</td></tr>
</table>

\subsection TutorialFeatureSamplerLearner FeatureSamplerLearner

Produces FeatureSampler with specified indices.

<table class="example">
<tr><td>Example: learn converter and convert features.</td></tr>
<tr><td>
\include tutorial_feature_converter_example1.cpp
</td></tr>
<tr><td>Output:</td></tr>
<tr><td>
\include tutorial_feature_converter_example1.out
</td></tr>
</table>

\subsection TutorialFeatureRandomSamplerLearner FeatureRandomSamplerLearner

Produces FeatureSampler with random indices

\subsection TutorialNanToZeroConverterLearner NanToZeroConverterLearner

Produces NanToZeroConverter.

\subsection TutorialNominalToBoolConverterLearner NominalToBoolConverterLearner

Produces NominalToBoolConverter.

\subsection TutorialRemoveNominalConverterLearner RemoveNominalConverterLearner

Produces RemoveNominalConverter.
**/
}