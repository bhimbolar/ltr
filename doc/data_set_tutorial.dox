namespace ltr {
/** \page TutorialData Data manipulation
    \ingroup Tutorial

\tableofcontents

\section TutorialIntroduction Introduction

There are <a href=http://en.wikipedia.org/wiki/Learning_to_rank#Approaches>three approaches</a> to learning to rank:
 - Pointwise approach
 - Pairwise approach
 - Listwise approach

The difference is in the type of used train data.
In order to provide all approaches DataSet in LTR has a template
paramter \c TElement, which can be Object, ObjectPair and ObjectList
for pointwise, pairwise and listwise approaches correspondingly.
 
\section TutorialDataObject Object

Object is the main class to operate with data.
Any object contains features, actual and predicted labels.
Every feature has index and double value.

\subsection TutorialDataObjectFeatures Features
Every Object has several features with indexes 0, 1, 2... Every feature is a double value.

You can operate with features using this functions:
\li \link Object::feature_count() feature_count() \endlink - returns number of features
\li \link Object::operator[] operator[](int i)\endlink, \link Object::at at(int i)\endlink - access to the i'th feature of the object
\li Object::operator<<(double value) - adds new feature to the object

Example: Operating with features                 | Output:
-------------------------------------------------|------------------
\include tutorial_data_example1.cpp              | \include tutorial_data_example1.out


\subsection TutorialDataObjectLabels Actual and predicted labels

Every object has an actual label and a predicted label. This labels are double values.


You can manage them, using this functions:
\li \link Object::set_actual_label(double) set_actual_label(double label) \endlink
\li \link Object::set_predicted_label(double) const set_predicted_abel(double label) \endlink
\li \link Object::actual_label() const actual_label() \endlink
\li \link Object::predicted_label() const predicted_label() \endlink


Example: Operating with actual and predicted labels  | Output:
-----------------------------------------------------|------------------
\include tutorial_data_example2.cpp                  | \include tutorial_data_example2.out

\subsection TutorialDataObjectCopying Copying objects

There are two ways to copy objects.
\li %Simple copy: it doesn't create real copy of the object. It copyes only links to features and metaInfo.
\code Object b = a;                 // This creates a simple copy.
\endcode
\li Deep copy: creates real copy of the object. To use deep copy you should call \link Object::deepCopy() const deepCopy()\endlink
\code Object b = a.deepCopy();      // This creates a full copy.
\endcode

Example: Copying objects                         | Output:
-------------------------------------------------|------------------
\include tutorial_data_example4.cpp              | \include tutorial_data_example4.out


\section TutorialDataObjectPair ObjectPair

%Class to operate pairs of object. Every pair contains two objects:
\li ObjectPair::first, ObjectPair::second

Example: Manipulating objects in pair            | Output:
-------------------------------------------------|------------------
\include tutorial_data_example5.cpp              | \include tutorial_data_example5.out

\section TutorialDataObjectList ObjectList

%Class to operate pairs of object. Every list contains several objects.

There are several ways to get object from a list.
\li \link ObjectList::at(const int) at(const int id) \endlink
\li \link ObjectList::operator[](const int) operator[](const int id) \endlink

You can also add objects into list using operator<< or \link ObjectList::add(const Object& obj) add(Object) \endlink method.<br>
List can be cleared by calling \link ObjectList::clear() clear()\endlink method.<br>
To find out, how many elements are there in the list, call the \link ObjectList::size() size()\endlink method.

\section TutorialDataPerObjectAccessor PerObjectAccessor

Object, ObjectPair and ObjectList are currently main data types used in LTR.
If you want to write a code handling all of them PerObjectAccessor is what you need.
It allows you to access an individual Object in all this containers by index.
In the example below function for printing actual labels is implemented.

Example: Working with %PerObjectAccessor         | Output:
-------------------------------------------------|------------------
\include tutorial_data_per_object.cpp            | \include tutorial_data_per_object.out

\section TutorialDataDataSet DataSet

DataSet is a class to operate with sets of data.
It can contain Object, ObjectPair or ObjectList as elements.<br>Every elment can also has a double weight, default weight is 1.
\code
DataSet<Object>     data1;   // This data set contains objects
DataSet<ObjectPair> data2;   // This data set contains pair
DataSet<ObjectList> data3;   // This data set contains lists
\endcode

Ltr defines typedefs for this three types of DataSet:
\code
typedef DataSet<Object>     PointwiseDataSet;
typedef DataSet<ObjectPair> PairwiseDataSet;
typedef DataSet<ObjectList> ListwiseDataSet;
\endcode

\subsection TutorialDataDataSetBasicOperations Basic operations

Function for basic operations:
\li DataSet::size() - returns number of elements in DataSet
\li DataSet::clear() - cleares DataSet

\li DataSet::add(const TElement&) - adds element to DataSet
\li DataSet::operator<<(const TElement&) - adds element to DataSet
\li DataSet::add(const TElement&, double weight) - adds element with weight to DataSet
\li \link DataSet::setWeight Dataset::setWeight(size_t element_idx, double weight) \endlink - sets weight of element with index idx

\li \link DataSet::at DataSet::at(size_t idx) \endlink - returns element with index idx
\li \link DataSet::operator[] DataSet::operator[](size_t idx) \endlink - returns element with index idx
\li \link DataSet::getWeight DataSet::getWeight(size_t idx) \endlink - returns the weight of element with index idx
\li \link DataSet::erase DataSet::erase(size_t i) \endlink - removes the element from the DataSet.

\li \link DataSet::deepCopy() const DataSet::deepCopy()\endlink - creates a full copy of DataSet

Example: Basic %DataSet operations               | Output:
-------------------------------------------------|------------------
\include tutorial_data_example7.cpp              | \include tutorial_data_example7.out

\subsection TutorialDataDataSetSavingAndLoading Loading and saving into files

Main thing, you can do with DataSet, is to load it from file or save it into file.

List of supported formats:

Format:      |  Load | Save | Description:
-------------|-------|------|-----------
svmlight     | + | + | http://svmlight.joachims.org/
yandex       | + | + | http://imat2009.yandex.ru/en/datasets
arff         | + | - | http://weka.wikispaces.com/ARFF+%28book+version%29

Function for loading DataSet from file:
\code
template<class TElement>
DataSet<TElement> ltr::io_utility::loadDataSet(const string& filename, const string& format);
\endcode

\li \c TElement - type of elements in DataSet.
\li \c filename - name of file with data.
\li \c format - format of data in the file. It can be "yandex", "svmlight" or "Arff"

\note
- Missed features will be changed by ltr::utility::NaN
- String (nominal) features will be changed by hash of the string value
- Use FeatureInfo::getFeatureValues (see the next section) to restore the string value of a nominal feature

Function for saving DataSet into file.
\code
template<class TElement>
void ltr::io_utility::saveDataSet(const DataSet<TElement>& data,
                                  const string& filename,
                                  const string& format);
\endcode

\li \c data - data to save.
\li \c filename - name of file to save data in
\li \c format - format to save data. Can be "smv-lite" or "yandex"

~~~~~~~~{.cpp}
#include "ltr/data/utility/io_utility.h"

using ltr::io_utility::loadDataSet;
using ltr::io_utility::saveDataSet;

using ltr::DataSet;

int main() {
  DataSet<Object> = loadDataSet<Object>("test_file", "svmlight");
  return 0;
}
~~~~~~~~

\subsection TutorialDataDataSetFeatureInfo Feature info

FeatureInfo initially appeared to support arff format and 
containes information about types (e.g. \c NOMINAL, \c NUMERIC, \c BOOLEAN)
and possible values of features.

One can access FeatureInfo of DataSet using DataSet::feature_info().

FeatureInfo public functions:
 - FeatureInfo::feature_count() - return count of features
 - FeatureInfo::resize - change number of features
 - FeatureInfo::addFeature - add info about one feature
 - FeatureInfo::getFeatureType - return feature type: \c NOMINAL, \c NUMERIC or \c BOOLEAN
 - FeatureInfo::getFeatureValues - return map from numeric to string values for \c NOMINAL features

**/
}
